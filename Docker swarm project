#Steps:

#As the junior engineer, you are responsible for only configuring Docker Swarm and providing your team with a step-by-step guide of setting up the Swarm.
#You should assume that there are new team members that may not have Docker installed on their devices.
#Your swarm creation should include the following steps via your remote ssh terminal in VSCode:

#Setting up docker
#Set security group for the EC2 instances to accept all traffic from the VPC IP/CIDR
  #Create or copy the SSH key file to a known location (example: ~/$USER/Downloads/keyfile.pem)
  #Create a config file located in the .ssh directory of the user account not /root/.ssh
  #Create the ssh config targets in the following format:
    #Host (Name)
    #HostName (IP address)
    #User (Sign-in)
    #IdentityFile (SSH key path)


#Installing docker on all hosts
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh

#Verifying that docker is in an active state
systemctl status docker

#Change the hostname on each node to identify the master node and the two worker nodes
hostnamectl set-hostname (name)

#Be sure to add your ssh key to each node
  #Set security group for the EC2 instances to accept all traffic from the VPC IP/CIDR
  #Create or copy the SSH key file to a known location (example: ~/$USER/Downloads/keyfile.pem)
  #Create a config file located in the .ssh directory of the user account not /root/.ssh
  #Create the ssh targets in the following format:
    #Host (Name)
    #HostName (IP address)
    #User (Sign-in)
    #IdentityFile (SSH key path)

#Creating the Swarm using one master node and two worker nodes
  #Setup the manager
  docker swarm init --advertise-addr Private IPv4

  #Copy/Paste the command it gives to the workers
  #Example: docker swarm join --token (token)

#Show your team members the status of the docker nodes
docker node ls


#Advanced:

#As the lead engineer, youâ€™ve reviewed the Swarm configuration and you are now ready to deploy your services on the Swarm. Consider the following steps as you deploy the service:

#Using only the CLI, ssh into the master node host and run the command to create your service using an Official image of your choice out of the following company preferred images:
#apache

#Initially only launch 1 replica.
docker service create --replicas 1 --name apache-service httpd:latest

#Run the commands to verify the service has been created and is running
docker service ls
docker service ps apache-service

#Since it is a global application that needs to scale, Using the CLI, run the necessary commands to scale the service to 3 replicas.
docker service update apache-service --replicas=3

#Verify that the service has scaled
docker service ps apache-service

#Remove the docker service
docker service rm (service name)
